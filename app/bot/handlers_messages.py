from aiogram import Bot, F, Router
from aiogram.exceptions import TelegramForbiddenError
from aiogram.types import Message
from filter_media import SupportedMediaFilter

from app.bot.utils import check_user_is_banned, extract_user_id
from app.core.config import settings
from app.core.db import get_async_session
from app.crud.message import crud_message
from app.crud.user import crud_user

router = Router()


@router.message(F.chat.type == 'private', F.text)
@router.message(F.chat.type == 'private', SupportedMediaFilter())
async def handle_user_request(message: Message, bot: Bot):
    print('FUNC: handle_user_request')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    content = message.text or message.caption
    if content and len(content) > 3500:
        return await message.reply('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –µ–≥–æ –¥–æ 3500 —Å–∏–º–≤–æ–ª–æ–≤.')

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
    if message.content_type == 'text':
        await bot.send_message(
            chat_id=settings.GROUP_ID,
            text=(f'{message.text}\n\n–ò–º—è: {message.from_user.full_name}\nUsername: #id{message.from_user.id}'),
            message_thread_id=settings.MESSAGE_THREAD_ID,
            parse_mode='HTML',
        )
    else:
        await message.copy_to(
            chat_id=settings.GROUP_ID,
            message_thread_id=settings.MESSAGE_THREAD_ID,
            caption=((message.caption or '') + f'–ò–º—è: {message.from_user.full_name}\nUsername: #id{message.from_user.id}'),
            parse_mode='HTML',
        )

    # –†–∞–±–æ—Ç–∞ —Å –ë–î
    session_generator = get_async_session()
    session = await session_generator.__anext__()
    db_user = await crud_user.get_or_create_user_by_tg_message(message, session)

    if check_user_is_banned(db_user):
        return None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    message_data = {
        'telegram_user_id': message.from_user.id,
        'attachments': message.content_type != 'text',
    }
    if content:
        message_data['text'] = content

    await crud_message.create(message_data, session)

    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ú—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ üòä')


@router.message(F.chat.id == int(settings.GROUP_ID), F.reply_to_message)
async def send_message_answer(message: Message, bot: Bot):
    if not message.reply_to_message.from_user.is_bot:
        return None
    try:
        chat_id = extract_user_id(message.reply_to_message)
    except ValueError as err:
        return await message.reply(text=f'–ù–µ –º–æ–≥—É –∏–∑–≤–ª–µ—á—å Id.  –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:\n{err!s}')
    try:
        await message.copy_to(chat_id)
    except TelegramForbiddenError:
        await message.reply(text='–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ. –ë–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω')
    session_generator = get_async_session()
    session = await session_generator.__anext__()
    db_user = await crud_user.get_or_create_user_by_tg_message(message, session)
    await crud_user.register_admin(db_user, session)
    message_data = {
        'telegram_user_id': message.from_user.id,
        'answer_to_user_id': chat_id,
    }
    if message.text:
        message_data['text'] = message.text
    elif message.caption:
        message_data['text'] = message.caption
        message_data['attachments'] = True

    await crud_message.create(message_data, session)
